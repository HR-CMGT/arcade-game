{"mappings":"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","sources":["src/arcade/debugpanel.js","src/arcade/joystick.js","src/arcade/arcade.js","src/game.js"],"sourcesContent":["import { Joystick } from \"./joystick\"\n\n//#region Template\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n<style>\n:host {\n    position:           absolute;\n    top:                10px;\n    right:              10px;\n}\nroot {\n    top:                10px;\n    right:              10px;\n    width:              289px; \n    height:             120px;\n    display:            block;\n    background-color:   #75a8f77a;\n}\nroot * {\n    position:           relative;\n}\n.button-wrapper, .axes-wrapper {\n    display:            flex;\n    flex-wrap:          wrap;\n    float:              left;\n}\nroot .button-div {\n    border: solid 1px black;\n    width:              60px;\n    margin:             5px;\n    padding:            5px;\n}\n.button-wrapper {\n    width:              164px;\n}\n.axes-wrapper {\n    width:              115px;\n    margin:             5px;\n}\n.axes-cell {\n    width:              25px;  \n    height:             25px; \n    margin:             5px;  \n    border:             solid 1px transparent;\n}\n.axes-cell.direction {\n    border:             solid 1px black;\n}\n.axes-cell.center{\n    border:             solid 1px black;\n    background-color:   blue;\n}\n.axes-cell.active{\n    background-color:   red;\n}\n.identifier{\n    position:           absolute;\n    top:                5px;\n    left:               5px;\n    width:              auto;\n    font-weight:        bold;\n    color:              #fff;\n}\n</style>`\n//#endregion\n\nexport class DebugPanel extends HTMLElement {\n    #panelHeight = 120\n    #panelSpacing = 10\n\n    #joystick;\n    #numberOfButtons;\n    #buttonDivs = []; //HTMLElement[]\n\n    #left; //HTMLElement\n    #right; //HTMLElement\n    #up; //HTMLElement\n    #down; //HTMLElement\n\n    #rootElement; //HTMLElement\n\n    Axes = []; //number[]\n\n    constructor(joystick, numOfButtons) {\n        super()\n\n        this.#joystick = joystick\n        this.#numberOfButtons = numOfButtons\n\n        let spaceFromTop = this.#panelSpacing + (this.#joystick.JoystickNumber * (this.#panelHeight + this.#panelSpacing))\n        this.style.top = spaceFromTop + \"px\"\n\n        this.#rootElement = document.createElement('root')\n        this.#rootElement.style.height = this.#panelHeight + \"px\"\n        template.appendChild(this.#rootElement)\n\n        // identifier\n        let identifier = document.createElement(\"div\")\n        identifier.classList.add('identifier')\n        identifier.innerHTML = \"#\" + this.#joystick.JoystickNumber\n        this.#rootElement.appendChild(identifier)\n\n        // axes\n        this.#createHTMLForAxes()\n\n        // this.buttons = buttons\n        this.#createHTMLForButtons()\n        this.#createListenersForButtons()\n\n        this.attachShadow({ mode: 'open' })\n        if (this.shadowRoot) {\n            let temp = template.content.cloneNode(true)\n            temp.appendChild(this.#rootElement)\n            this.shadowRoot.appendChild(temp)\n\n        }\n\n        document.body.appendChild(this)\n    }\n\n    #createListenersForButtons() {\n        for (let i = 0; i < this.#numberOfButtons; i++) {\n            document.addEventListener(this.#joystick.ButtonEvents[i],\n                (e) => this.#handleButtonClicks(e, i))\n        }\n    }\n\n    #handleButtonClicks(event, index) {\n        this.#buttonDivs[index].style.filter =\n            'hue-rotate(' + (Math.random() * 360) + 'deg)'\n    }\n\n    #createHTMLForButtons() {\n        let buttonWrapper = document.createElement(\"div\")\n        buttonWrapper.className = \"button-wrapper\"\n\n        for (let index = 0; index < this.#numberOfButtons; index++) {\n            let buttonDiv = document.createElement(\"div\")\n            buttonDiv.className = \"button-div\"\n            buttonWrapper.appendChild(buttonDiv)\n\n            buttonDiv.style.backgroundColor = \"blue\"\n            buttonDiv.innerHTML = \"Button \" + (index + 1)\n\n            this.#buttonDivs.push(buttonDiv)\n        }\n        this.#rootElement.appendChild(buttonWrapper)\n    }\n\n    #createHTMLForAxes() {\n        let axesWrapper = document.createElement(\"div\")\n        axesWrapper.className = \"axes-wrapper\"\n\n        for (let i = 1; i <= 9; i++) {\n            let cell = document.createElement('div')\n            cell.className = \"axes-cell\"\n            if (i % 2 == 0) cell.classList.add(\"direction\")\n            if (i == 5) cell.classList.add(\"center\")\n            axesWrapper.appendChild(cell)\n\n            switch (i) {\n                case 2:\n                    this.#up = cell\n                    break\n                case 4:\n                    this.#left = cell\n                    break\n                case 6:\n                    this.#right = cell\n                    break\n                case 8:\n                    this.#down = cell\n                    break\n            }\n        }\n\n        this.#rootElement.appendChild(axesWrapper)\n    }\n\n    update() {\n        // X-axe\n        if (this.Axes[0] == 0) {\n            this.#left.classList.remove(\"active\")\n            this.#right.classList.remove(\"active\")\n        }\n        else {\n            if (this.Axes[0] < 0)\n                this.#left.classList.add(\"active\")\n            else if (this.Axes[0] > 0)\n                this.#right.classList.add(\"active\")\n        }\n\n        // Y-axe\n        if (this.Axes[1] == 0) {\n            this.#up.classList.remove(\"active\")\n            this.#down.classList.remove(\"active\")\n        }\n        else {\n            if (this.Axes[1] < 0)\n                this.#up.classList.add(\"active\")\n            else if (this.Axes[1] > 0)\n                this.#down.classList.add(\"active\")\n        }\n    }\n}\n\nwindow.customElements.define(\"debug-panel\", DebugPanel)","import { DebugPanel } from \"./debugpanel\"\n\nexport class Joystick {\n\n    #DEBUG = true\n\n    // BUT1 and BUT2 are the indexes of the redirect function. \n    // When both are pressed, redirect to homepage\n    #BUT1 = 8\n    #BUT2 = 9\n\n    // FIELDS\n    #joystickNumber = 0;\n    #numberOfBUttons = 0;\n    #buttonEvents = []; //string[]\n    #axes = []; //number[]\n\n    #gamepad; //Gamepad\n    #previousGamepad; //Gamepad\n    #previousJoystickDirection;\n\n    // #debugPanell //DebugPanel\n\n    // PROPERTIES\n    // Axes as booleans\n    get Left() { return (this.#axes[0] == -1) }\n    get Right() { return (this.#axes[0] == 1) }\n    get Up() { return (this.#axes[1] == -1) }\n    get Down() { return (this.#axes[1] == 1) }\n    get Neutral() { return this.#axes[0] == 0 && this.#axes[1] == 0 }\n    // Axes as direction\n    // values are -1, 0, 1 because arcade sticks are digital\n    get Y() { return Math.round(this.#axes[1]) }\n    get X() { return Math.round(this.#axes[0]) }\n\n    // Joystick identifier\n    get JoystickNumber() { return this.#joystickNumber }\n    get ButtonEvents() { return this.#buttonEvents }\n\n    // Current gamepad\n    get Gamepad() { return this.#gamepad }\n    set Gamepad(gamepad) { this.#gamepad = gamepad }\n\n    // previous gamepad\n    get PreviousGamepad() { return this.#previousGamepad }\n    set PreviousGamepad(previousGamepad) { this.#previousGamepad = previousGamepad }\n\n    /**\n     * Creates a joystick object for one player\n     * @param joystickNumber The number of the first joystick (starts at 0)\n     * @param numOfButtons The number of buttons needed by your game\n     * @param debug true for in browser gamepad info\n     */\n    constructor(joystickNumber, numOfButtons, debug) {\n        this.#joystickNumber = joystickNumber\n        this.#numberOfBUttons = numOfButtons\n        this.#DEBUG = debug\n\n        for (let i = 0; i < this.#numberOfBUttons; i++) {\n            this.#buttonEvents.push('joystick' + this.JoystickNumber + 'button' + (i))\n        }\n\n        this.#buttonEvents.push('joystick' + this.JoystickNumber + 'neutral');\n        this.#buttonEvents.push('joystick' + this.JoystickNumber + 'left');\n        this.#buttonEvents.push('joystick' + this.JoystickNumber + 'right');\n        this.#buttonEvents.push('joystick' + this.JoystickNumber + 'up');\n        this.#buttonEvents.push('joystick' + this.JoystickNumber + 'down');\n\n        this.#previousJoystickDirection = 'neutral';\n\n        if (this.#DEBUG) { this.debugPanel = new DebugPanel(this, this.#numberOfBUttons) }\n    }\n\n    update() {\n        if(typeof this.#gamepad === 'undefined' ||\n            typeof this.#gamepad.index === 'undefined' ||\n            typeof navigator.getGamepads()[this.#gamepad.index] === 'undefined'){\n            return;\n        }\n        let gamepad = navigator.getGamepads()[this.#gamepad.index]\n        if (gamepad) { this.#readGamepad(gamepad) }\n    }\n\n    #readGamepad(gamepad) {\n        for (let index = 0; index < this.#numberOfBUttons; index++) {\n            if (this.#buttonPressed(gamepad.buttons[index]) && !this.#buttonPressed(this.#previousGamepad.buttons[index])) {\n                document.dispatchEvent(new Event(this.#buttonEvents[index]))\n            }\n            if (this.#buttonPressed(gamepad.buttons[this.#BUT1]) &&\n                this.#buttonPressed(gamepad.buttons[this.#BUT2]) &&\n                (!this.#buttonPressed(this.#previousGamepad.buttons[this.#BUT1]) || !this.#buttonPressed(this.#previousGamepad.buttons[this.#BUT2]))) {\n                document.dispatchEvent(new Event('redirect'))\n            }\n        }\n\n        // gamepad has 4 axes, first is x, second is y\n        // an axe returns a float, only int is needed\n        this.#axes[0] = Math.round(gamepad.axes[0])\n        this.#axes[1] = Math.round(gamepad.axes[1])\n\n        if (this.#DEBUG) {\n            // update the axes (x and y)\n            this.debugPanel.Axes[0] = this.#axes[0]\n            this.debugPanel.Axes[1] = this.#axes[1]\n\n            this.debugPanel.update()\n        }\n        \n        if(this.Left && this.#previousJoystickDirection !== 'left'){\n            this.#previousJoystickDirection = 'left';\n            document.dispatchEvent(new Event('joystick' + this.JoystickNumber + 'left'))\n        }\n        if(this.Right && this.#previousJoystickDirection !== 'right'){\n            this.#previousJoystickDirection = 'right';\n            document.dispatchEvent(new Event('joystick' + this.JoystickNumber + 'right'))\n        }\n        if(this.Up && this.#previousJoystickDirection !== 'up'){\n            this.#previousJoystickDirection = 'up';\n            document.dispatchEvent(new Event('joystick' + this.JoystickNumber + 'up'))\n        }\n        if(this.Down && this.#previousJoystickDirection !== 'down'){\n            this.#previousJoystickDirection = 'down';\n            document.dispatchEvent(new Event('joystick' + this.JoystickNumber + 'down'))\n        }\n        if(this.Neutral && this.#previousJoystickDirection !== 'neutral'){\n            this.#previousJoystickDirection = 'neutral';\n            document.dispatchEvent(new Event('joystick' + this.JoystickNumber + 'neutral'))\n        }\n\n        // console.log(this.#previousJoystickDirection);\n        this.#previousGamepad = gamepad\n    }\n    /**\n     * Helper function to filter some bad input\n     * @param b \n     */\n    #buttonPressed(b) {\n        if (typeof (b) == \"object\") {\n            return b.pressed\n        }\n        return b == 1.0\n    }\n\n    destroy() {\n        if (this.#DEBUG) this.debugPanel.remove()\n    }\n}","import { Game } from \"../game\"\nimport { Joystick } from \"./joystick\"\n\nexport class Arcade {\n    #DEBUG; //boolean\n    #joysticks; //Joystick[]\n    #REDIRECT_URL = \"http://hr-cmgt.github.io/arcade-server\"\n    #multiplayer = false\n    #game;\n\n    // PROPERTIES\n    get Joysticks() { return this.#joysticks }\n\n    /**\n     * Creates an arcade 'cabinet' \n     * @param mp 'true' for 2 joystick multiplayer Arcade (default single player)\n     */\n    constructor(game, mp = false, debug = false) {\n        this.#game = game\n        this.#multiplayer = mp\n        this.#DEBUG = debug\n        this.#joysticks = []\n\n        if (this.#DEBUG) this.#showStatus(\"Gamepad is NOT connected. Press a button to connect\")\n\n        document.addEventListener(\"redirect\", () => this.#onRedirect())\n        window.addEventListener(\"gamepadconnected\", (e) => this.#onGamePadConnected(e))\n        window.addEventListener(\"gamepaddisconnected\", (e) => this.#onGamePadDisconnected(e))\n    }\n\n    /**\n     * Handles redirect fired from joystick\n     */\n    #onRedirect() {\n        if (this.#DEBUG) { console.log('redirect!!') }\n        window.location.href = this.#REDIRECT_URL\n    }\n\n    /**\n     * Handles connecting a joystick\n     * @param e Gamepad event\n     */\n    #onGamePadConnected(e) {\n        if (this.#DEBUG) {\n            console.log('Game pad connected')\n            console.log(\"Joystick number: \" + e.gamepad.index)\n        }\n        if ((!this.#multiplayer && this.#joysticks.length == 0) || this.#multiplayer) {\n            let joystick = this.createAndAddJoystick(e.gamepad.index, 6)\n\n            joystick.PreviousGamepad = joystick.Gamepad\n            joystick.Gamepad = e.gamepad\n            if (joystick.PreviousGamepad == null) {\n                joystick.PreviousGamepad = e.gamepad\n            }\n        }\n\n        if (this.#DEBUG) this.#removeStatus()\n    }\n\n    /**\n     * Handles disconnecting a joystick\n     * @param e Gamepad event\n     */\n    #onGamePadDisconnected(e) {\n        if (this.#DEBUG) { console.log('Game pad disconnected') }\n        if (this.#DEBUG) this.#showStatus(\"Gamepad is NOT connected. Connect the gamepad and press a button.\")\n        this.removeJoystick(e.gamepad.index)\n        this.#game.disconnect()\n    }\n\n    /**\n     * Creates an Joystick and adds it to this arcade\n     * @param joystickNumber Unique identifier given by the joystick\n     * @param numOfButtons Sets number of buttons on joystick\n     */\n    createAndAddJoystick(joystickNumber, numOfButtons) {\n        let joystickCheck = this.getJoystickByNumber(joystickNumber)\n        if (joystickCheck != null) {\n            return joystickCheck\n        }\n\n        let joystickNew = new Joystick(joystickNumber, numOfButtons, this.#DEBUG)\n        this.#joysticks[joystickNumber] = joystickNew\n        if (joystickNew) {\n            document.dispatchEvent(new CustomEvent(\"joystickcreated\", { detail: joystickNumber }))\n            console.log(\"joystick created\")\n        }\n        return joystickNew\n    }\n\n    /**\n     * Removes a Joystick from this arcade\n     * @param joystickNumber Unique identifier of the joystick\n     */\n    removeJoystick(joystickNumber) {\n        let joystickCheck = this.getJoystickByNumber(joystickNumber)\n        if (joystickCheck == null) {\n            return\n        }\n\n        var index = this.#joysticks.indexOf(joystickCheck)\n        if(typeof this.#joysticks[index].destroy === 'function'){\n            this.#joysticks[index].destroy()\n        }\n        if (index > -1) {\n            this.#joysticks.splice(index, 1)\n        }\n    }\n\n    /**\n     * Get a Joystick with its unique identifier\n     * @param joystickNumber Unique identifier given by the joystick\n     */\n    getJoystickByNumber(joystickNumber) {\n        for (let joystick of this.#joysticks) {\n            if (joystick.JoystickNumber == joystickNumber) {\n                return joystick\n            }\n        }\n        return null\n    }\n\n    #showStatus(content) {\n        let container\n        let p\n        if (!(container = document.getElementsByTagName(\"status\")[0])) {\n            container = document.createElement(\"status\")\n            document.body.append(container)\n        }\n        if (container) {\n            if (!(p = container.getElementsByTagName(\"p\")[0])) {\n                p = document.createElement(\"p\")\n                container.appendChild(p)\n            }\n        }\n        if (p) {\n            p.innerHTML = content\n        }\n    }\n\n    #removeStatus() {\n        let status\n        if (status = document.getElementsByTagName(\"status\")[0]) {\n            status.remove()\n        }\n    }\n}","import { Arcade } from './arcade/arcade'\n\nexport class Game {\n    #arcade;\n    #joystickListener;\n\n    constructor() {\n        // this = current game\n        // true = multiplayer\n        // true = debug\n        this.#arcade = new Arcade(this, true, true)\n        \n        // The game must wait for de joysticks to connect\n        console.log(\"waiting for joysticks to connect\")\n        this.#joystickListener = (e) => this.#joyStickFound(e)\n        document.addEventListener(\"joystickcreated\",  this.#joystickListener)\n    }\n\n    #joyStickFound(e) {\n        let joystick = this.#arcade.Joysticks[e.detail]\n        \n        // debug, this shows you the names of the buttons when they are pressed\n        for (const buttonEvent of joystick.ButtonEvents) {\n            document.addEventListener(buttonEvent, () => console.log(buttonEvent))\n        }\n\n        this.update();\n    }\n\n    update() {\n        for (let joystick of this.#arcade.Joysticks) {\n            joystick.update()\n        }\n\n        requestAnimationFrame(() => this.update());\n    }\n\n    disconnect() {\n        document.removeEventListener(\"joystickcreated\", this.#joystickListener)\n    }\n}\n\nnew Game()"],"names":["$3a3e7c0656a0a2b2$var$template","document","createElement","innerHTML","$3a3e7c0656a0a2b2$export$aa8b56e5f619ede7","HTMLElement","panelHeight","panelSpacing","joystick","numberOfButtons","buttonDivs","left","right","up","down","rootElement","Axes","constructor","numOfButtons","super","this","spaceFromTop","JoystickNumber","style","top","height","appendChild","identifier","classList","add","createHTMLForAxes","createHTMLForButtons","createListenersForButtons","attachShadow","mode","shadowRoot","temp","content","cloneNode","body","i","addEventListener","ButtonEvents","e","handleButtonClicks","event","index","filter","Math","random","buttonWrapper","className","buttonDiv","backgroundColor","push","axesWrapper","cell","update","remove","window","customElements","define","$321a6c74647eec04$export$41026bc5091240de","DEBUG","BUT1","BUT2","joystickNumber","numberOfBUttons","buttonEvents","axes","gamepad","previousGamepad","previousJoystickDirection","Left","Right","Up","Down","Neutral","Y","round","X","Gamepad","PreviousGamepad","debug","debugPanel","navigator","getGamepads","readGamepad","buttonPressed","buttons","dispatchEvent","Event","b","pressed","destroy","$89d13974cb260cb5$export$867450f2bdc4b8d5","joysticks","REDIRECT_URL","multiplayer","game","Joysticks","mp","showStatus","onRedirect","onGamePadConnected","onGamePadDisconnected","console","log","location","href","length","createAndAddJoystick","removeStatus","e1","removeJoystick","disconnect","joystickCheck","getJoystickByNumber","joystickNew","CustomEvent","detail","indexOf","splice","container","p","getElementsByTagName","append","status","arcade","joystickListener","joyStickFound","buttonEvent","requestAnimationFrame","removeEventListener"],"version":3,"file":"index.6d335c2e.js.map"}